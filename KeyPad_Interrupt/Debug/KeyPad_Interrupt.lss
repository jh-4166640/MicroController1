
KeyPad_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000076a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00000810  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4a  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000938  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075d  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000027c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e3  00000000  00000000  00002e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000380d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__vector_6>
  1a:	00 00       	nop
  1c:	fc c0       	rjmp	.+504    	; 0x216 <__vector_7>
  1e:	00 00       	nop
  20:	4e c1       	rjmp	.+668    	; 0x2be <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7b d2       	rcall	.+1270   	; 0x5ba <main>
  c4:	50 c3       	rjmp	.+1696   	; 0x766 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:
 7 8 9 div	
 4 5 6 mult
 1 2 3 sub
 reset 0 result add
*/
ISR(INT4_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	uint8_t line = (~scan_line) & 0x0f;
  e0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <scan_line>
  e4:	80 95       	com	r24
  e6:	8f 70       	andi	r24, 0x0F	; 15
	cli();
  e8:	f8 94       	cli
	switch (line)
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	81 f0       	breq	.+32     	; 0x10e <__vector_5+0x46>
  ee:	18 f4       	brcc	.+6      	; 0xf6 <__vector_5+0x2e>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	31 f0       	breq	.+12     	; 0x100 <__vector_5+0x38>
  f4:	21 c0       	rjmp	.+66     	; 0x138 <__vector_5+0x70>
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	89 f0       	breq	.+34     	; 0x11c <__vector_5+0x54>
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	b1 f0       	breq	.+44     	; 0x12a <__vector_5+0x62>
  fe:	1c c0       	rjmp	.+56     	; 0x138 <__vector_5+0x70>
	{
		case 0x01: *key_num = 0x1; break;
 100:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 104:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 83       	st	Z, r24
 10c:	1b c0       	rjmp	.+54     	; 0x144 <__vector_5+0x7c>
		case 0x02: *key_num = 0x4; break;
 10e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 112:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
 11a:	14 c0       	rjmp	.+40     	; 0x144 <__vector_5+0x7c>
		case 0x04: *key_num = 0x7; break;
 11c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 120:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	80 83       	st	Z, r24
 128:	0d c0       	rjmp	.+26     	; 0x144 <__vector_5+0x7c>
		case 0x08: *key_num = RESET; break;
 12a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 12e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	80 83       	st	Z, r24
 136:	06 c0       	rjmp	.+12     	; 0x144 <__vector_5+0x7c>
		default: *key_num = NON_CLICK;
 138:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 13c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 140:	88 e8       	ldi	r24, 0x88	; 136
 142:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	98 e0       	ldi	r25, 0x08	; 8
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <__vector_5+0x82>
 152:	00 c0       	rjmp	.+0      	; 0x154 <__vector_5+0x8c>
 154:	00 00       	nop
	}
	_delay_ms(DEBOUNCING); // 프로테우스에서 채터링 발생 시간이 맞지 않으므로 인위적인 delay
	sei();
 156:	78 94       	sei
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_6>:
ISR(INT5_vect){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
	uint8_t line = (~scan_line) & 0x0f;
 188:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <scan_line>
 18c:	80 95       	com	r24
 18e:	8f 70       	andi	r24, 0x0F	; 15
	cli();
 190:	f8 94       	cli
	switch (line)
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	81 f0       	breq	.+32     	; 0x1b6 <__vector_6+0x46>
 196:	18 f4       	brcc	.+6      	; 0x19e <__vector_6+0x2e>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	31 f0       	breq	.+12     	; 0x1a8 <__vector_6+0x38>
 19c:	20 c0       	rjmp	.+64     	; 0x1de <__vector_6+0x6e>
 19e:	84 30       	cpi	r24, 0x04	; 4
 1a0:	89 f0       	breq	.+34     	; 0x1c4 <__vector_6+0x54>
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	b1 f0       	breq	.+44     	; 0x1d2 <__vector_6+0x62>
 1a6:	1b c0       	rjmp	.+54     	; 0x1de <__vector_6+0x6e>
	{
		case 0x01: *key_num = 0x2; break;
 1a8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 1ac:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	80 83       	st	Z, r24
 1b4:	1a c0       	rjmp	.+52     	; 0x1ea <__vector_6+0x7a>
		case 0x02: *key_num = 0x5; break;
 1b6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 1ba:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	80 83       	st	Z, r24
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <__vector_6+0x7a>
		case 0x04: *key_num = 0x8; break;
 1c4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 1c8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	80 83       	st	Z, r24
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <__vector_6+0x7a>
		case 0x08: *key_num = 0x0; break;
 1d2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 1d6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 1da:	10 82       	st	Z, r1
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <__vector_6+0x7a>
		default: *key_num = NON_CLICK;
 1de:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 1e2:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 1e6:	88 e8       	ldi	r24, 0x88	; 136
 1e8:	80 83       	st	Z, r24
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	98 e0       	ldi	r25, 0x08	; 8
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <__vector_6+0x80>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <__vector_6+0x8a>
 1fa:	00 00       	nop
	}
	_delay_ms(DEBOUNCING); // 프로테우스에서 채터링 발생 시간이 맞지 않으므로 인위적인 delay
	sei();
 1fc:	78 94       	sei
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_7>:
ISR(INT6_vect){
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	0b b6       	in	r0, 0x3b	; 59
 222:	0f 92       	push	r0
 224:	2f 93       	push	r18
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	uint8_t line = (~scan_line) & 0x0f;
 22e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <scan_line>
 232:	80 95       	com	r24
 234:	8f 70       	andi	r24, 0x0F	; 15
	cli();
 236:	f8 94       	cli
	switch (line)
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	81 f0       	breq	.+32     	; 0x25c <__vector_7+0x46>
 23c:	18 f4       	brcc	.+6      	; 0x244 <__vector_7+0x2e>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	31 f0       	breq	.+12     	; 0x24e <__vector_7+0x38>
 242:	21 c0       	rjmp	.+66     	; 0x286 <__vector_7+0x70>
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	89 f0       	breq	.+34     	; 0x26a <__vector_7+0x54>
 248:	88 30       	cpi	r24, 0x08	; 8
 24a:	b1 f0       	breq	.+44     	; 0x278 <__vector_7+0x62>
 24c:	1c c0       	rjmp	.+56     	; 0x286 <__vector_7+0x70>
	{
		case 0x01: *key_num = 0x3; break;
 24e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 252:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	80 83       	st	Z, r24
 25a:	1b c0       	rjmp	.+54     	; 0x292 <__vector_7+0x7c>
		case 0x02: *key_num = 0x6; break;
 25c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 260:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 264:	86 e0       	ldi	r24, 0x06	; 6
 266:	80 83       	st	Z, r24
 268:	14 c0       	rjmp	.+40     	; 0x292 <__vector_7+0x7c>
		case 0x04: *key_num = 0x9; break;
 26a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 26e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 272:	89 e0       	ldi	r24, 0x09	; 9
 274:	80 83       	st	Z, r24
 276:	0d c0       	rjmp	.+26     	; 0x292 <__vector_7+0x7c>
		case 0x08: *key_num = RESULT; break;
 278:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 27c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	80 83       	st	Z, r24
 284:	06 c0       	rjmp	.+12     	; 0x292 <__vector_7+0x7c>
		default: *key_num = NON_CLICK;
 286:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 28a:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 28e:	88 e8       	ldi	r24, 0x88	; 136
 290:	80 83       	st	Z, r24
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	98 e0       	ldi	r25, 0x08	; 8
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <__vector_7+0x82>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <__vector_7+0x8c>
 2a2:	00 00       	nop
	}
	_delay_ms(DEBOUNCING); // 프로테우스에서 채터링 발생 시간이 맞지 않으므로 인위적인 delay
	sei();
 2a4:	78 94       	sei
}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0b be       	out	0x3b, r0	; 59
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_8>:
ISR(INT7_vect){
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	0f 92       	push	r0
 2cc:	2f 93       	push	r18
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	uint8_t line = (~scan_line) & 0x0f;
 2d6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <scan_line>
 2da:	80 95       	com	r24
 2dc:	8f 70       	andi	r24, 0x0F	; 15
	cli();
 2de:	f8 94       	cli
	switch (line)
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	81 f0       	breq	.+32     	; 0x304 <__vector_8+0x46>
 2e4:	18 f4       	brcc	.+6      	; 0x2ec <__vector_8+0x2e>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	31 f0       	breq	.+12     	; 0x2f6 <__vector_8+0x38>
 2ea:	21 c0       	rjmp	.+66     	; 0x32e <__vector_8+0x70>
 2ec:	84 30       	cpi	r24, 0x04	; 4
 2ee:	89 f0       	breq	.+34     	; 0x312 <__vector_8+0x54>
 2f0:	88 30       	cpi	r24, 0x08	; 8
 2f2:	b1 f0       	breq	.+44     	; 0x320 <__vector_8+0x62>
 2f4:	1c c0       	rjmp	.+56     	; 0x32e <__vector_8+0x70>
	{
		case 0x01: *key_num = SUB; break;
 2f6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 2fa:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 2fe:	8b e0       	ldi	r24, 0x0B	; 11
 300:	80 83       	st	Z, r24
 302:	1b c0       	rjmp	.+54     	; 0x33a <__vector_8+0x7c>
		case 0x02: *key_num = MUL; break;
 304:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 308:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 30c:	8c e0       	ldi	r24, 0x0C	; 12
 30e:	80 83       	st	Z, r24
 310:	14 c0       	rjmp	.+40     	; 0x33a <__vector_8+0x7c>
		case 0x04: *key_num = DIV; break;
 312:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 316:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 31a:	8d e0       	ldi	r24, 0x0D	; 13
 31c:	80 83       	st	Z, r24
 31e:	0d c0       	rjmp	.+26     	; 0x33a <__vector_8+0x7c>
		case 0x08: *key_num = ADD; break;
 320:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 324:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 328:	8a e0       	ldi	r24, 0x0A	; 10
 32a:	80 83       	st	Z, r24
 32c:	06 c0       	rjmp	.+12     	; 0x33a <__vector_8+0x7c>
		default: *key_num = NON_CLICK;
 32e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 332:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 336:	88 e8       	ldi	r24, 0x88	; 136
 338:	80 83       	st	Z, r24
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	98 e0       	ldi	r25, 0x08	; 8
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <__vector_8+0x82>
 348:	00 c0       	rjmp	.+0      	; 0x34a <__vector_8+0x8c>
 34a:	00 00       	nop
	}
	_delay_ms(DEBOUNCING); // 프로테우스에서 채터링 발생 시간이 맞지 않으므로 인위적인 delay
	sei();
 34c:	78 94       	sei
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0b be       	out	0x3b, r0	; 59
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <PORT_INIT>:
// 0b 1011 1111 
uint8_t num_data[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0xbf, 0x7f,0xff};
uint8_t sel_FND[4] = {0x80, 0x40, 0x20, 0x10};

void PORT_INIT(void){
	DDRC = 0xC0;
 366:	80 ec       	ldi	r24, 0xC0	; 192
 368:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xf0;	// FND Select
 36a:	90 ef       	ldi	r25, 0xF0	; 240
 36c:	91 bb       	out	0x11, r25	; 17
	DDRB = 0xff;	// FND print
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x0f;	// KeySwitch set // Upper nibble input key, Low nibble scan line
 372:	2f e0       	ldi	r18, 0x0F	; 15
 374:	22 b9       	out	0x02, r18	; 2
	EIMSK = (1<<INT4) | (1<<INT5) | (1<<INT6) | (1<<INT7);
 376:	99 bf       	out	0x39, r25	; 57
	EICRB = (1<<ISC71) | (1<<ISC70) | (1<<ISC61) | (1<<ISC60) | (1<<ISC51) | (1<<ISC50) | (1<<ISC41) | (1<<ISC40);// INT4~7 rising edge trigger
 378:	8a bf       	out	0x3a, r24	; 58
	sei();			// Interrupt permit
 37a:	78 94       	sei
 37c:	08 95       	ret

0000037e <Reset_Val_arr>:
}


void Reset_Val_arr(uint8_t *arr){
 37e:	bc 01       	movw	r22, r24
	uint8_t i = 0;
	for(i=0;i<4;i++){
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	15 c0       	rjmp	.+42     	; 0x3ae <Reset_Val_arr+0x30>
		*(arr+i) = NON_CLICK;
 384:	29 2f       	mov	r18, r25
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	fb 01       	movw	r30, r22
 38a:	e2 0f       	add	r30, r18
 38c:	f3 1f       	adc	r31, r19
 38e:	48 e8       	ldi	r20, 0x88	; 136
 390:	40 83       	st	Z, r20
		PORTE = sel_FND[i];
 392:	f9 01       	movw	r30, r18
 394:	e0 50       	subi	r30, 0x00	; 0
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	20 81       	ld	r18, Z
 39a:	23 b9       	out	0x03, r18	; 3
		PORTB = 0xff;
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	28 bb       	out	0x18, r18	; 24
 3a0:	ef ef       	ldi	r30, 0xFF	; 255
 3a2:	ff e8       	ldi	r31, 0x8F	; 143
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <Reset_Val_arr+0x26>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <Reset_Val_arr+0x2c>
 3aa:	00 00       	nop
}


void Reset_Val_arr(uint8_t *arr){
	uint8_t i = 0;
	for(i=0;i<4;i++){
 3ac:	9f 5f       	subi	r25, 0xFF	; 255
 3ae:	94 30       	cpi	r25, 0x04	; 4
 3b0:	48 f3       	brcs	.-46     	; 0x384 <Reset_Val_arr+0x6>
		PORTB = 0xff;
		_delay_ms(10);
	}
	
	
}
 3b2:	08 95       	ret

000003b4 <Set_Val_arr>:
void Set_Val_arr(uint8_t *arr, int16_t num){
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	fc 01       	movw	r30, r24
 3bc:	9b 01       	movw	r18, r22
	if(num > 9999){
 3be:	60 31       	cpi	r22, 0x10	; 16
 3c0:	87 e2       	ldi	r24, 0x27	; 39
 3c2:	78 07       	cpc	r23, r24
 3c4:	9c f0       	brlt	.+38     	; 0x3ec <Set_Val_arr+0x38>
		*(arr+3) = BAR;
 3c6:	8a e0       	ldi	r24, 0x0A	; 10
 3c8:	83 83       	std	Z+3, r24	; 0x03
		*(arr+2) = BAR;
 3ca:	82 83       	std	Z+2, r24	; 0x02
		*(arr+1) = BAR;
 3cc:	81 83       	std	Z+1, r24	; 0x01
		*(arr)	 = BAR;
 3ce:	80 83       	st	Z, r24
		PORTC = 0x30;
 3d0:	80 e3       	ldi	r24, 0x30	; 48
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	20 40       	sbci	r18, 0x00	; 0
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <Set_Val_arr+0x26>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <Set_Val_arr+0x30>
 3e4:	00 00       	nop
		_delay_ms(200); 
		PORTC = 0xF0;
 3e6:	80 ef       	ldi	r24, 0xF0	; 240
 3e8:	85 bb       	out	0x15, r24	; 21
 3ea:	4f c0       	rjmp	.+158    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
	}
	else if(num < 0){
 3ec:	77 23       	and	r23, r23
 3ee:	9c f4       	brge	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		*(arr+3) = NEG;
 3f0:	8b e0       	ldi	r24, 0x0B	; 11
 3f2:	83 83       	std	Z+3, r24	; 0x03
		*(arr+2) = NEG;
 3f4:	82 83       	std	Z+2, r24	; 0x02
		*(arr+1) = NEG;
 3f6:	81 83       	std	Z+1, r24	; 0x01
		*(arr)	 = NEG;
 3f8:	80 83       	st	Z, r24
		PORTC = 0x70;
 3fa:	80 e7       	ldi	r24, 0x70	; 112
 3fc:	85 bb       	out	0x15, r24	; 21
 3fe:	9f ef       	ldi	r25, 0xFF	; 255
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	88 e0       	ldi	r24, 0x08	; 8
 404:	91 50       	subi	r25, 0x01	; 1
 406:	20 40       	sbci	r18, 0x00	; 0
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		_delay_ms(200);
		PORTC = 0xF0;
 410:	80 ef       	ldi	r24, 0xF0	; 240
 412:	85 bb       	out	0x15, r24	; 21
 414:	3a c0       	rjmp	.+116    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
	}
	else{
		*(arr+3) = (uint8_t)num/1000;
 416:	cb 01       	movw	r24, r22
 418:	99 27       	eor	r25, r25
 41a:	c8 ee       	ldi	r28, 0xE8	; 232
 41c:	d3 e0       	ldi	r29, 0x03	; 3
 41e:	be 01       	movw	r22, r28
 420:	7b d1       	rcall	.+758    	; 0x718 <__divmodhi4>
 422:	46 2f       	mov	r20, r22
 424:	63 83       	std	Z+3, r22	; 0x03
		num %= 1000;
 426:	c9 01       	movw	r24, r18
 428:	be 01       	movw	r22, r28
 42a:	76 d1       	rcall	.+748    	; 0x718 <__divmodhi4>
 42c:	ec 01       	movw	r28, r24
		*(arr+2) = (uint8_t)num/100;
 42e:	99 27       	eor	r25, r25
 430:	24 e6       	ldi	r18, 0x64	; 100
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	b9 01       	movw	r22, r18
 436:	70 d1       	rcall	.+736    	; 0x718 <__divmodhi4>
 438:	16 2f       	mov	r17, r22
 43a:	62 83       	std	Z+2, r22	; 0x02
		num %= 100;
 43c:	ce 01       	movw	r24, r28
 43e:	b9 01       	movw	r22, r18
 440:	6b d1       	rcall	.+726    	; 0x718 <__divmodhi4>
		*(arr+1) = (uint8_t)num/10;
 442:	99 27       	eor	r25, r25
 444:	6a e0       	ldi	r22, 0x0A	; 10
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	67 d1       	rcall	.+718    	; 0x718 <__divmodhi4>
 44a:	96 2f       	mov	r25, r22
 44c:	61 83       	std	Z+1, r22	; 0x01
 44e:	80 83       	st	Z, r24
		*arr = (uint8_t)num%10;
 450:	41 11       	cpse	r20, r1
		if(*(arr+3) == 0)							*(arr+3) = NON_CLICK;
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	88 e8       	ldi	r24, 0x88	; 136
 456:	83 83       	std	Z+3, r24	; 0x03
 458:	83 81       	ldd	r24, Z+3	; 0x03
		if(*(arr+3) == NON_CLICK && *(arr+2) == 0)	*(arr+2) = NON_CLICK;
 45a:	88 38       	cpi	r24, 0x88	; 136
 45c:	19 f4       	brne	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45e:	11 11       	cpse	r17, r1
 460:	01 c0       	rjmp	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	82 83       	std	Z+2, r24	; 0x02
 464:	82 81       	ldd	r24, Z+2	; 0x02
		if(*(arr+2) == NON_CLICK && *(arr+1) == 0)	*(arr+1) = NON_CLICK;
 466:	88 38       	cpi	r24, 0x88	; 136
 468:	19 f4       	brne	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46a:	91 11       	cpse	r25, r1
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	81 83       	std	Z+1, r24	; 0x01
 470:	80 eb       	ldi	r24, 0xB0	; 176
		PORTC = 0xB0;
 472:	85 bb       	out	0x15, r24	; 21
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	88 e0       	ldi	r24, 0x08	; 8
 47a:	91 50       	subi	r25, 0x01	; 1
 47c:	20 40       	sbci	r18, 0x00	; 0
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 484:	00 00       	nop
 486:	80 ef       	ldi	r24, 0xF0	; 240
		_delay_ms(200);
		PORTC = 0xF0;
 488:	85 bb       	out	0x15, r24	; 21
 48a:	df 91       	pop	r29
	}
}
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	08 95       	ret

00000492 <Set_number>:
 492:	cf 93       	push	r28
int16_t Set_number(uint8_t *arr){
 494:	df 93       	push	r29
	int16_t num = 0;
	if(*(arr+3) >= 0 && *(arr+3) <= 9)	num =  (int16_t)*(arr+3)*1000;
 496:	fc 01       	movw	r30, r24
 498:	23 81       	ldd	r18, Z+3	; 0x03
 49a:	2a 30       	cpi	r18, 0x0A	; 10
 49c:	40 f4       	brcc	.+16     	; 0x4ae <Set_number+0x1c>
 49e:	48 ee       	ldi	r20, 0xE8	; 232
 4a0:	53 e0       	ldi	r21, 0x03	; 3
 4a2:	24 9f       	mul	r18, r20
 4a4:	e0 01       	movw	r28, r0
 4a6:	25 9f       	mul	r18, r21
 4a8:	d0 0d       	add	r29, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <Set_number+0x20>
		_delay_ms(200);
		PORTC = 0xF0;
	}
}
int16_t Set_number(uint8_t *arr){
	int16_t num = 0;
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
	if(*(arr+3) >= 0 && *(arr+3) <= 9)	num =  (int16_t)*(arr+3)*1000;
	if(*(arr+2) >= 0 && *(arr+2) <= 9)	num += (int16_t)*(arr+2)*100;
 4b2:	fc 01       	movw	r30, r24
 4b4:	22 81       	ldd	r18, Z+2	; 0x02
 4b6:	2a 30       	cpi	r18, 0x0A	; 10
 4b8:	28 f4       	brcc	.+10     	; 0x4c4 <Set_number+0x32>
 4ba:	f4 e6       	ldi	r31, 0x64	; 100
 4bc:	2f 9f       	mul	r18, r31
 4be:	c0 0d       	add	r28, r0
 4c0:	d1 1d       	adc	r29, r1
 4c2:	11 24       	eor	r1, r1
	if(*(arr+1) >= 0 && *(arr+1) <= 9)	num += (int16_t)*(arr+1)*10;
 4c4:	fc 01       	movw	r30, r24
 4c6:	21 81       	ldd	r18, Z+1	; 0x01
 4c8:	2a 30       	cpi	r18, 0x0A	; 10
 4ca:	70 f4       	brcc	.+28     	; 0x4e8 <Set_number+0x56>
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	a9 01       	movw	r20, r18
 4d0:	44 0f       	add	r20, r20
 4d2:	55 1f       	adc	r21, r21
 4d4:	22 0f       	add	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	22 0f       	add	r18, r18
 4da:	33 1f       	adc	r19, r19
 4dc:	22 0f       	add	r18, r18
 4de:	33 1f       	adc	r19, r19
 4e0:	24 0f       	add	r18, r20
 4e2:	35 1f       	adc	r19, r21
 4e4:	c2 0f       	add	r28, r18
 4e6:	d3 1f       	adc	r29, r19
	if(*(arr) >= 0	 && *(arr) <= 9)	num += (int16_t)*(arr);
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 81       	ld	r18, Z
 4ec:	2a 30       	cpi	r18, 0x0A	; 10
 4ee:	10 f4       	brcc	.+4      	; 0x4f4 <Set_number+0x62>
 4f0:	c2 0f       	add	r28, r18
 4f2:	d1 1d       	adc	r29, r1
	Reset_Val_arr(arr);
 4f4:	44 df       	rcall	.-376    	; 0x37e <Reset_Val_arr>
	return num;
}
 4f6:	ce 01       	movw	r24, r28
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <Calculate>:
int16_t Calculate(int16_t *num1, int16_t *num2, uint8_t *op){
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	fc 01       	movw	r30, r24
 508:	eb 01       	movw	r28, r22
 50a:	8a 01       	movw	r16, r20
	int16_t res = EMPTY;
	if(*num1 != EMPTY && *num2 != EMPTY && (*op >= ADD && *op <= DIV)){
 50c:	20 81       	ld	r18, Z
 50e:	31 81       	ldd	r19, Z+1	; 0x01
 510:	2f 3f       	cpi	r18, 0xFF	; 255
 512:	8f e7       	ldi	r24, 0x7F	; 127
 514:	38 07       	cpc	r19, r24
 516:	89 f1       	breq	.+98     	; 0x57a <Calculate+0x7c>
 518:	68 81       	ld	r22, Y
 51a:	79 81       	ldd	r23, Y+1	; 0x01
 51c:	6f 3f       	cpi	r22, 0xFF	; 255
 51e:	af e7       	ldi	r26, 0x7F	; 127
 520:	7a 07       	cpc	r23, r26
 522:	71 f1       	breq	.+92     	; 0x580 <Calculate+0x82>
 524:	da 01       	movw	r26, r20
 526:	8c 91       	ld	r24, X
 528:	96 ef       	ldi	r25, 0xF6	; 246
 52a:	98 0f       	add	r25, r24
 52c:	94 30       	cpi	r25, 0x04	; 4
 52e:	58 f5       	brcc	.+86     	; 0x586 <Calculate+0x88>
		switch (*op)
 530:	8b 30       	cpi	r24, 0x0B	; 11
 532:	69 f0       	breq	.+26     	; 0x54e <Calculate+0x50>
 534:	18 f4       	brcc	.+6      	; 0x53c <Calculate+0x3e>
 536:	8a 30       	cpi	r24, 0x0A	; 10
 538:	31 f0       	breq	.+12     	; 0x546 <Calculate+0x48>
 53a:	28 c0       	rjmp	.+80     	; 0x58c <Calculate+0x8e>
 53c:	8c 30       	cpi	r24, 0x0C	; 12
 53e:	59 f0       	breq	.+22     	; 0x556 <Calculate+0x58>
 540:	8d 30       	cpi	r24, 0x0D	; 13
 542:	89 f0       	breq	.+34     	; 0x566 <Calculate+0x68>
 544:	23 c0       	rjmp	.+70     	; 0x58c <Calculate+0x8e>
		{
			case ADD:
				res = *num1 + *num2;
 546:	a9 01       	movw	r20, r18
 548:	46 0f       	add	r20, r22
 54a:	57 1f       	adc	r21, r23
			break;
 54c:	27 c0       	rjmp	.+78     	; 0x59c <Calculate+0x9e>
			case SUB:
				res = *num1 - *num2;
 54e:	a9 01       	movw	r20, r18
 550:	46 1b       	sub	r20, r22
 552:	57 0b       	sbc	r21, r23
			break;
 554:	23 c0       	rjmp	.+70     	; 0x59c <Calculate+0x9e>
			case MUL:
				res = *num1 * *num2;
 556:	26 9f       	mul	r18, r22
 558:	a0 01       	movw	r20, r0
 55a:	27 9f       	mul	r18, r23
 55c:	50 0d       	add	r21, r0
 55e:	36 9f       	mul	r19, r22
 560:	50 0d       	add	r21, r0
 562:	11 24       	eor	r1, r1
			break;
 564:	1b c0       	rjmp	.+54     	; 0x59c <Calculate+0x9e>
			case DIV:
				if(*num1 != 0 && *num2 != 0){
 566:	21 15       	cp	r18, r1
 568:	31 05       	cpc	r19, r1
 56a:	99 f0       	breq	.+38     	; 0x592 <Calculate+0x94>
 56c:	61 15       	cp	r22, r1
 56e:	71 05       	cpc	r23, r1
 570:	99 f0       	breq	.+38     	; 0x598 <Calculate+0x9a>
					res = *num1 / *num2;
 572:	c9 01       	movw	r24, r18
 574:	d1 d0       	rcall	.+418    	; 0x718 <__divmodhi4>
 576:	ab 01       	movw	r20, r22
 578:	11 c0       	rjmp	.+34     	; 0x59c <Calculate+0x9e>
	if(*(arr) >= 0	 && *(arr) <= 9)	num += (int16_t)*(arr);
	Reset_Val_arr(arr);
	return num;
}
int16_t Calculate(int16_t *num1, int16_t *num2, uint8_t *op){
	int16_t res = EMPTY;
 57a:	4f ef       	ldi	r20, 0xFF	; 255
 57c:	5f e7       	ldi	r21, 0x7F	; 127
 57e:	0e c0       	rjmp	.+28     	; 0x59c <Calculate+0x9e>
 580:	4f ef       	ldi	r20, 0xFF	; 255
 582:	5f e7       	ldi	r21, 0x7F	; 127
 584:	0b c0       	rjmp	.+22     	; 0x59c <Calculate+0x9e>
 586:	4f ef       	ldi	r20, 0xFF	; 255
 588:	5f e7       	ldi	r21, 0x7F	; 127
 58a:	08 c0       	rjmp	.+16     	; 0x59c <Calculate+0x9e>
 58c:	4f ef       	ldi	r20, 0xFF	; 255
 58e:	5f e7       	ldi	r21, 0x7F	; 127
 590:	05 c0       	rjmp	.+10     	; 0x59c <Calculate+0x9e>
			break;
			case DIV:
				if(*num1 != 0 && *num2 != 0){
					res = *num1 / *num2;
				}
				else res = EMPTY;
 592:	4f ef       	ldi	r20, 0xFF	; 255
 594:	5f e7       	ldi	r21, 0x7F	; 127
 596:	02 c0       	rjmp	.+4      	; 0x59c <Calculate+0x9e>
 598:	4f ef       	ldi	r20, 0xFF	; 255
 59a:	5f e7       	ldi	r21, 0x7F	; 127
			break;
		}
	}
	*num1 = EMPTY;
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	3f e7       	ldi	r19, 0x7F	; 127
 5a0:	31 83       	std	Z+1, r19	; 0x01
 5a2:	20 83       	st	Z, r18
	*num2 = EMPTY;
 5a4:	39 83       	std	Y+1, r19	; 0x01
 5a6:	28 83       	st	Y, r18
	*op = NON_CLICK;
 5a8:	98 e8       	ldi	r25, 0x88	; 136
 5aa:	f8 01       	movw	r30, r16
 5ac:	90 83       	st	Z, r25
	return res;
}
 5ae:	ca 01       	movw	r24, r20
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	08 95       	ret

000005ba <main>:

int main(void){
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	2a 97       	sbiw	r28, 0x0a	; 10
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	uint8_t key_in = NON_CLICK;
 5ce:	88 e8       	ldi	r24, 0x88	; 136
 5d0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t val[4] = {NON_CLICK,NON_CLICK,NON_CLICK,NON_CLICK};
 5d2:	8a 83       	std	Y+2, r24	; 0x02
 5d4:	8b 83       	std	Y+3, r24	; 0x03
 5d6:	8c 83       	std	Y+4, r24	; 0x04
 5d8:	8d 83       	std	Y+5, r24	; 0x05
	key_num = &key_in;
 5da:	9e 01       	movw	r18, r28
 5dc:	2f 5f       	subi	r18, 0xFF	; 255
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__data_end+0x1>
 5e4:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__data_end>
	volatile uint8_t *MY_FND = &PORTD;
	volatile uint8_t *key_scan_chk = &PORTE;
	uint8_t op = NON_CLICK;
 5e8:	8e 83       	std	Y+6, r24	; 0x06
	int16_t num1 =EMPTY, num2 = EMPTY, result = EMPTY;
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	9f e7       	ldi	r25, 0x7F	; 127
 5ee:	98 87       	std	Y+8, r25	; 0x08
 5f0:	8f 83       	std	Y+7, r24	; 0x07
 5f2:	9a 87       	std	Y+10, r25	; 0x0a
 5f4:	89 87       	std	Y+9, r24	; 0x09
	PORT_INIT();
 5f6:	b7 de       	rcall	.-658    	; 0x366 <PORT_INIT>
	PORTC = 0xFF;
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	85 bb       	out	0x15, r24	; 21
	uint8_t val[4] = {NON_CLICK,NON_CLICK,NON_CLICK,NON_CLICK};
	key_num = &key_in;
	volatile uint8_t *MY_FND = &PORTD;
	volatile uint8_t *key_scan_chk = &PORTE;
	uint8_t op = NON_CLICK;
	int16_t num1 =EMPTY, num2 = EMPTY, result = EMPTY;
 5fc:	0f ef       	ldi	r16, 0xFF	; 255
 5fe:	1f e7       	ldi	r17, 0x7F	; 127
	PORT_INIT();
	PORTC = 0xFF;
	while(1){
		if(key_in>=0 && key_in <=9) {
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	8a 30       	cpi	r24, 0x0A	; 10
 604:	a0 f4       	brcc	.+40     	; 0x62e <main+0x74>
			if(result != EMPTY) {
 606:	0f 3f       	cpi	r16, 0xFF	; 255
 608:	8f e7       	ldi	r24, 0x7F	; 127
 60a:	18 07       	cpc	r17, r24
 60c:	29 f0       	breq	.+10     	; 0x618 <main+0x5e>
				Reset_Val_arr(val);
 60e:	ce 01       	movw	r24, r28
 610:	02 96       	adiw	r24, 0x02	; 2
 612:	b5 de       	rcall	.-662    	; 0x37e <Reset_Val_arr>
				result = EMPTY;
 614:	0f ef       	ldi	r16, 0xFF	; 255
 616:	1f e7       	ldi	r17, 0x7F	; 127
			}
			val[3] = val[2];
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	8d 83       	std	Y+5, r24	; 0x05
			val[2] = val[1];
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	8c 83       	std	Y+4, r24	; 0x04
			val[1] = val[0];
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	8b 83       	std	Y+3, r24	; 0x03
			val[0] = key_in;
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	8a 83       	std	Y+2, r24	; 0x02
			key_in = NON_CLICK;
 628:	88 e8       	ldi	r24, 0x88	; 136
 62a:	89 83       	std	Y+1, r24	; 0x01
 62c:	0c c0       	rjmp	.+24     	; 0x646 <main+0x8c>
		}
		else if(key_in == ADD || key_in == SUB || key_in == MUL || key_in == DIV){
 62e:	8a 50       	subi	r24, 0x0A	; 10
 630:	84 30       	cpi	r24, 0x04	; 4
 632:	48 f4       	brcc	.+18     	; 0x646 <main+0x8c>
			num1 = Set_number(val);
 634:	ce 01       	movw	r24, r28
 636:	02 96       	adiw	r24, 0x02	; 2
 638:	2c df       	rcall	.-424    	; 0x492 <Set_number>
 63a:	98 87       	std	Y+8, r25	; 0x08
 63c:	8f 83       	std	Y+7, r24	; 0x07
			op=key_in;
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	8e 83       	std	Y+6, r24	; 0x06
			key_in = NON_CLICK;
 642:	88 e8       	ldi	r24, 0x88	; 136
 644:	89 83       	std	Y+1, r24	; 0x01
		}
		if(key_in == RESULT){
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	8f 30       	cpi	r24, 0x0F	; 15
			num2 = Set_number(val);
 64a:	b1 f4       	brne	.+44     	; 0x678 <main+0xbe>
 64c:	ce 01       	movw	r24, r28
 64e:	02 96       	adiw	r24, 0x02	; 2
 650:	20 df       	rcall	.-448    	; 0x492 <Set_number>
 652:	9a 87       	std	Y+10, r25	; 0x0a
 654:	89 87       	std	Y+9, r24	; 0x09
			result = Calculate(&num1, &num2, &op);
 656:	ae 01       	movw	r20, r28
 658:	4a 5f       	subi	r20, 0xFA	; 250
 65a:	5f 4f       	sbci	r21, 0xFF	; 255
 65c:	be 01       	movw	r22, r28
 65e:	67 5f       	subi	r22, 0xF7	; 247
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	ce 01       	movw	r24, r28
 664:	07 96       	adiw	r24, 0x07	; 7
 666:	4b df       	rcall	.-362    	; 0x4fe <Calculate>
			Set_Val_arr(val,result);
 668:	8c 01       	movw	r16, r24
 66a:	bc 01       	movw	r22, r24
 66c:	ce 01       	movw	r24, r28
 66e:	02 96       	adiw	r24, 0x02	; 2
 670:	a1 de       	rcall	.-702    	; 0x3b4 <Set_Val_arr>
			key_in = NON_CLICK;
 672:	88 e8       	ldi	r24, 0x88	; 136
 674:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(key_in == RESET){
 676:	10 c0       	rjmp	.+32     	; 0x698 <main+0xde>
 678:	8e 30       	cpi	r24, 0x0E	; 14
			Reset_Val_arr(val);
 67a:	71 f4       	brne	.+28     	; 0x698 <main+0xde>
 67c:	ce 01       	movw	r24, r28
 67e:	02 96       	adiw	r24, 0x02	; 2
 680:	7e de       	rcall	.-772    	; 0x37e <Reset_Val_arr>
			num1 = EMPTY;
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	9f e7       	ldi	r25, 0x7F	; 127
 686:	98 87       	std	Y+8, r25	; 0x08
 688:	8f 83       	std	Y+7, r24	; 0x07
			num2 = EMPTY;
 68a:	9a 87       	std	Y+10, r25	; 0x0a
 68c:	89 87       	std	Y+9, r24	; 0x09
			result = EMPTY;
			op = NON_CLICK;
 68e:	88 e8       	ldi	r24, 0x88	; 136
 690:	8e 83       	std	Y+6, r24	; 0x06
			key_in = NON_CLICK;
 692:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(key_in == RESET){
			Reset_Val_arr(val);
			num1 = EMPTY;
			num2 = EMPTY;
			result = EMPTY;
 694:	0f ef       	ldi	r16, 0xFF	; 255
 696:	1f e7       	ldi	r17, 0x7F	; 127
			op = NON_CLICK;
			key_in = NON_CLICK;
			
		}
		for(i=0;i<4;i++){
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	38 c0       	rjmp	.+112    	; 0x70c <main+0x152>
			*key_scan_chk = scan_line;
 69c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <scan_line>
 6a0:	83 b9       	out	0x03, r24	; 3
			if(val[i] != NON_CLICK){
 6a2:	82 2f       	mov	r24, r18
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	e2 e0       	ldi	r30, 0x02	; 2
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	ec 0f       	add	r30, r28
 6ac:	fd 1f       	adc	r31, r29
 6ae:	e8 0f       	add	r30, r24
 6b0:	f9 1f       	adc	r31, r25
 6b2:	30 81       	ld	r19, Z
 6b4:	38 38       	cpi	r19, 0x88	; 136
 6b6:	c1 f0       	breq	.+48     	; 0x6e8 <main+0x12e>
				*MY_FND = sel_FND[i];	
 6b8:	fc 01       	movw	r30, r24
 6ba:	e0 50       	subi	r30, 0x00	; 0
 6bc:	ff 4f       	sbci	r31, 0xFF	; 255
 6be:	30 81       	ld	r19, Z
 6c0:	32 bb       	out	0x12, r19	; 18
				PORTB = num_data[val[i]];
 6c2:	e2 e0       	ldi	r30, 0x02	; 2
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	ec 0f       	add	r30, r28
 6c8:	fd 1f       	adc	r31, r29
 6ca:	e8 0f       	add	r30, r24
 6cc:	f9 1f       	adc	r31, r25
 6ce:	e0 81       	ld	r30, Z
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	ec 5f       	subi	r30, 0xFC	; 252
 6d4:	fe 4f       	sbci	r31, 0xFE	; 254
 6d6:	80 81       	ld	r24, Z
 6d8:	88 bb       	out	0x18, r24	; 24
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	9f e8       	ldi	r25, 0x8F	; 143
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <main+0x124>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x12a>
 6e4:	00 00       	nop
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <main+0x13c>
				_delay_ms(10); // 출력용 delay (잔상효과)
			}
			else {
				*MY_FND = sel_FND[i];
 6e8:	fc 01       	movw	r30, r24
 6ea:	e0 50       	subi	r30, 0x00	; 0
 6ec:	ff 4f       	sbci	r31, 0xFF	; 255
 6ee:	80 81       	ld	r24, Z
 6f0:	82 bb       	out	0x12, r24	; 18
				PORTB = 0xff;
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f6:	80 e7       	ldi	r24, 0x70	; 112
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <main+0x140>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <main+0x146>
			}
			_delay_us(100);	// scan line 간에 delay
			scan_line = scan_line >> 1;
 700:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <scan_line>
 704:	86 95       	lsr	r24
 706:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <scan_line>
			result = EMPTY;
			op = NON_CLICK;
			key_in = NON_CLICK;
			
		}
		for(i=0;i<4;i++){
 70a:	2f 5f       	subi	r18, 0xFF	; 255
 70c:	24 30       	cpi	r18, 0x04	; 4
 70e:	30 f2       	brcs	.-116    	; 0x69c <main+0xe2>
				PORTB = 0xff;
			}
			_delay_us(100);	// scan line 간에 delay
			scan_line = scan_line >> 1;
		}
		scan_line = 0xf7;
 710:	87 ef       	ldi	r24, 0xF7	; 247
 712:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <scan_line>
	}
 716:	74 cf       	rjmp	.-280    	; 0x600 <main+0x46>

00000718 <__divmodhi4>:
 718:	97 fb       	bst	r25, 7
 71a:	07 2e       	mov	r0, r23
 71c:	16 f4       	brtc	.+4      	; 0x722 <__divmodhi4+0xa>
 71e:	00 94       	com	r0
 720:	06 d0       	rcall	.+12     	; 0x72e <__divmodhi4_neg1>
 722:	77 fd       	sbrc	r23, 7
 724:	08 d0       	rcall	.+16     	; 0x736 <__divmodhi4_neg2>
 726:	0b d0       	rcall	.+22     	; 0x73e <__udivmodhi4>
 728:	07 fc       	sbrc	r0, 7
 72a:	05 d0       	rcall	.+10     	; 0x736 <__divmodhi4_neg2>
 72c:	3e f4       	brtc	.+14     	; 0x73c <__divmodhi4_exit>

0000072e <__divmodhi4_neg1>:
 72e:	90 95       	com	r25
 730:	81 95       	neg	r24
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	08 95       	ret

00000736 <__divmodhi4_neg2>:
 736:	70 95       	com	r23
 738:	61 95       	neg	r22
 73a:	7f 4f       	sbci	r23, 0xFF	; 255

0000073c <__divmodhi4_exit>:
 73c:	08 95       	ret

0000073e <__udivmodhi4>:
 73e:	aa 1b       	sub	r26, r26
 740:	bb 1b       	sub	r27, r27
 742:	51 e1       	ldi	r21, 0x11	; 17
 744:	07 c0       	rjmp	.+14     	; 0x754 <__udivmodhi4_ep>

00000746 <__udivmodhi4_loop>:
 746:	aa 1f       	adc	r26, r26
 748:	bb 1f       	adc	r27, r27
 74a:	a6 17       	cp	r26, r22
 74c:	b7 07       	cpc	r27, r23
 74e:	10 f0       	brcs	.+4      	; 0x754 <__udivmodhi4_ep>
 750:	a6 1b       	sub	r26, r22
 752:	b7 0b       	sbc	r27, r23

00000754 <__udivmodhi4_ep>:
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	5a 95       	dec	r21
 75a:	a9 f7       	brne	.-22     	; 0x746 <__udivmodhi4_loop>
 75c:	80 95       	com	r24
 75e:	90 95       	com	r25
 760:	bc 01       	movw	r22, r24
 762:	cd 01       	movw	r24, r26
 764:	08 95       	ret

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
